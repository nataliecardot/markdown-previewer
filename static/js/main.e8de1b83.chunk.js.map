{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","useState","markdown","setMarkdown","className","class","controlId","as","style","height","value","placeholder","onChange","event","updateMarkdown","target","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAMIA,EAASC,EAAQ,IAsCNC,EAhCH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,KAQhB,OACE,yBAAKC,UAAU,iBACb,wBAAIC,MAAM,8BAAV,sBACA,yBAAKA,MAAM,mCACT,yBAAKA,MAAM,aACT,kBAAC,IAAD,CAAWC,UAAU,wBAEnB,kBAAC,IAAD,CAAWD,MAAM,mBAAjB,kBACA,kBAAC,IAAD,CAAaE,GAAG,WAAWC,MAAO,CAACC,OAAQ,KAAMC,MAAOR,EAAUS,YAAY,uBAAuBC,SAAU,SAAAC,GAAK,OAZvG,SAAAX,GACrBC,EAAYD,GAWoHY,CAAeD,EAAME,OAAOL,aAK1J,yBAAKL,MAAM,wCACT,yBAAKA,MAAM,aACT,uBAAGA,MAAM,cAAT,mBACA,yBAAKW,wBAAyB,CAACC,OAAQnB,EAAOI,UCxBpCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e8de1b83.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport FormControl from 'react-bootstrap/FormControl';\n\nlet marked = require('marked');\n\n// Since v. 16.8, React supported hooks -- allows you to use state in a function component. Create React App has been using function component instead of class component to help ease the transition https://stackoverflow.com/questions/55889693/why-does-create-react-app-now-use-a-function-component-for-app\n// Changed from function App() { } to arrow function component\n// Note! Don't need to bind this when using arrow function (Why? See https://stackoverflow.com/questions/52979915/why-we-dont-need-to-bind-the-arrow-function-in-react)\n// See https://www.robinwieruch.de/react-function-component\nconst App = () => {\n  const [markdown, setMarkdown] = useState('');\n\n  // Reminder: Can't use experimental class fields syntax since this isn't a class component\n  const updateMarkdown = markdown => {\n    setMarkdown(markdown);\n  }\n\n  return (\n    <div className=\"App container\">\n      <h1 class=\"mt-4 text-center display-4\">Markdown Previewer</h1>\n      <div class=\"row mt-5 justify-content-center\">\n        <div class=\"col-xl-11\">\n          <FormGroup controlId=\"formControlsTextarea\">\n            {/* Label is for CSS styling, not a Bootstrap class */}\n            <FormLabel class=\"lead label mb-4\">Markdown Input</FormLabel>\n            <FormControl as=\"textarea\" style={{height: 200}} value={markdown} placeholder=\"Enter some markdown.\" onChange={event => updateMarkdown(event.target.value)} />\n          </FormGroup>\n        </div>\n      </div>\n\n      <div class=\"row mt-4 justify-content-center mb-4\">\n        <div class=\"col-xl-11\">\n          <p class=\"lead label\">Markdown Output</p>\n          <div dangerouslySetInnerHTML={{__html: marked(markdown)}}>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}